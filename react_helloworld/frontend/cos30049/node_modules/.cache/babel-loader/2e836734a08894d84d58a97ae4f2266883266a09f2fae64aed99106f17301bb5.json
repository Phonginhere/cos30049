{"ast":null,"code":"var _jsxFileName = \"/Users/phongporter/Documents/GITHUB/cos30049/react_helloworld/frontend/cos30049/src/components/Body.js\",\n  _s = $RefreshSig$();\n// src/components/Body.js\nimport React, { useState, useEffect } from 'react';\nimport './Body.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Body = () => {\n  _s();\n  const [tableData, setTableData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  // Fetch data from FastAPI on component mount\n  useEffect(() => {\n    fetch('http://localhost:8000/api/data') // FastAPI endpoint\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setTableData(data.data); // Assuming FastAPI returns { \"data\": [...] }\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setError(true);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error loading data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data from CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"data-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: tableData.length > 0 && Object.keys(tableData[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: key.toUpperCase()\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"100%\",\n            children: \"No data available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this) : tableData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.values(row).map((value, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 19\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Body, \"sGCp2tsvtcRYsZrNtPTpVcgI7mw=\");\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Body","_s","tableData","setTableData","loading","setLoading","error","setError","fetch","then","response","ok","Error","json","data","catch","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","Object","keys","map","key","toUpperCase","colSpan","row","index","values","value","idx","_c","$RefreshReg$"],"sources":["/Users/phongporter/Documents/GITHUB/cos30049/react_helloworld/frontend/cos30049/src/components/Body.js"],"sourcesContent":["// src/components/Body.js\nimport React, { useState, useEffect } from 'react';\nimport './Body.css';\n\nconst Body = () => {\n  const [tableData, setTableData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  // Fetch data from FastAPI on component mount\n  useEffect(() => {\n    fetch('http://localhost:8000/api/data')  // FastAPI endpoint\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setTableData(data.data);  // Assuming FastAPI returns { \"data\": [...] }\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error);\n        setError(true);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"body-container\">\n        <h2>Loading data...</h2>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"body-container\">\n        <h2>Error loading data.</h2>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"body-container\">\n      <h2>Data from CSV</h2>\n      <table className=\"data-table\">\n        <thead>\n          <tr>\n            {/* Dynamically create table headers based on keys */}\n            {tableData.length > 0 &&\n              Object.keys(tableData[0]).map((key) => (\n                <th key={key}>{key.toUpperCase()}</th>\n              ))}\n          </tr>\n        </thead>\n        <tbody>\n          {tableData.length === 0 ? (\n            <tr>\n              <td colSpan=\"100%\">No data available.</td>\n            </tr>\n          ) : (\n            tableData.map((row, index) => (\n              <tr key={index}>\n                {Object.values(row).map((value, idx) => (\n                  <td key={idx}>{value}</td>\n                ))}\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Body;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}